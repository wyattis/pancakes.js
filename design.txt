Engine
	game()

	Game
		constructor(engine, container)
		container					// html element to create each canvas
		add
			screen(name)			// add a screen to the list of possible screens
		play
			screen(name)			// cleans up a previous screen before initializing the next one

	Screen
		constructor(callbacks)
		init()						// Handles the creation of canvas layers needed for the screen
		load(cacheKey, url)
		update(delta)
		render(delta)				// renders each layer in the screen
		add
			spritesheet(name, cacheKey, tileWidth, tileHeight)
			layer()					// creates a new canvas layer

	Layer
		constructor()	// creates a new canvas as a layer
		ctx 			// holds the canvas context
		depth			// controls how far away from the viewport the layer appears to be
		render()
	 	add
	 		sprite(cacheKey, x, y)
	 		group()

	Sprite
		constructor(parentLayer)
		add
			animation(name, spritesheetName, frames, totalTime, opts)
			image(name, cacheKey)
			sound(name, cacheKey)
		play
			animation(name)
			sound(name)
		position(x, y)

	Animation
		constructor(spritesheetKey, frames, totalTime, infinite)
		play()
		stop()
		onFinish(cb)
		onRepeat(cb)

	Spritesheet
		constructor(cacheKey, tileWidth, tileHeight, tilePadding)

	Button
		constructor(onHover, onClick, onDown, onUp)

	Input				// handle events on the container and pass through to appropriate layer

============================================
Private stuffs
============================================
	Physics
	Geometry
	Collision
	QuadTree
	Rectangle
	Circle
	Cache
		add(key, obj)
		use(key)

	AssetManager
		load(cacheKey, url)
		go(progressCB, finishedCB)

	ObjectFactory
		sprite
		spritesheet
		group

	TileSheet(spritesheetName, numCols, numRows)

	Render

	C
		static random
		static randomInt
		static range(min, max) => [min, ..., max]